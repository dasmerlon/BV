# -*- coding: utf-8 -*-

"""
@author: Merle Hoffmann (7031673), 
         Abdulssatar Khateb (6976879), 
         Felix Swimmer (7162123)
         
Im Rahmen dieser Aufgabe soll die Erkennung von Kanten und der Effekt von StÃ¶rungen darauf am
Testbild mandrill.png genauer betrachtet werden.
"""

"""
1. Ladet euch das Testbild mandrill.png aus dem Moodle in Python. Wendet den Sobel-Filter auf
das Bild an und lasst euch die GradientenstÃ¤rke pro Pixel als Ergebnisbild berechnen. Visualisiert
dieses Bild. WÃ¤hlt nun einen Grenzwert fÃ¼r die minimale GradientenstÃ¤rke und zeigt nur noch alle
Pixel, die oberhalb dieses Grenzwerts liegen als Kante an (auf 1 setzen). Der Rest soll unterdrÃ¼ckt
werden (auf 0 setzen). Beschreibt kurz das Ergebnis der Kantendetektion. Wurden die wichtigsten
Kanten des Gesichts gefunden? Wurden zusÃ¤tzlich weitere Kanten gefunden? Welcher Grenzwert
fÃ¼hrt zu einem sinnvollen Ergebnis?
Hinweis: Obwohl es sich beim Ergebnisbild (dem Bild der GradientenstÃ¤rken) um ein Graustufenbild
handelt, macht es Sinn, fÃ¼r die Visualisierung auf das Vorgeben der cmap=â€™grayâ€™ zu
verzichten. Dies fÃ¼hrt zu einer EinfÃ¤rbung des Ergebnisses, wobei hohe Werte gelbliche FarbtÃ¶ne
und niedrige Werte blaue FarbtÃ¶ne bekommen.
"""



"""
2. Wendet nun vor der Anwendung des Sobel-Filters und der Berechnung der GradientenstÃ¤rken
einen GauÃŸ-Filter auf das Bild an. Experimentiert dabei mit verschiedenen s. Ziel soll es dabei
sein, dass mÃ¶glichst nur noch die wichtigsten Kanten des Gesichts (Abgrenzungen der farbigen
Nasenpartien, die Augen, Ãœbergang von Nase zu Mund/Bart,...) erkannt werden. Wie verÃ¤ndert
sich dabei das Ergebnis in Bezug auf die noch erkannten Kanten? Visualisiert das eurer Meinung
nach beste Ergebnis erneut und benutzt dabei ebenso wieder einen Grenzwert, um nur recht starke
Kanten zu visualisieren. Wie und warum verÃ¤ndert sich euer Grenzwert dabei mit steigendem ?
Hinweis: Setzt bei der Anwendung des GauÃŸ-Filters den Parameter preserve_range=True, damit
auch das Ergebnis im Bereich 0; : : : 255 bleibt.
"""



"""
3. Extrahiert nun die Bildzeile bei x ô€€€ 150 aus dem Originalbild sowie aus der mit einem GauÃŸ-Filter
weichgezeichneten Variante aus der vorherigen Teilaufgabe. FÃ¼gt auÃŸerdem noch eine weitere
Variante mit einem sehr hohen  hinzu und extrahiert ebenfalls die genannte Bildzeile. Ermittelt
nun eine Approximation der ersten Ableitung, indem ihr jeweils auf die gesamten Bilder den
Sobel-Operator zur Detektion vertikaler Kanten anwendet. Extrahiert erneut die entsprechende
Bildzeile bei x ô€€€ 150 aus den Ergebnissen. Erstellt nun drei Plots mit der Funktion matplotlib.
pyplot.plot (s. Aufgabenblatt 6) mit jeweils der extrahierten Bildzeile und der dazu passenden
extrahierten Zeile des Ergebnisses des Sobel-Operators. Beschreibt kurz, wie sich die Kurven durch
die unterschiedlichen GlÃ¤ttungen verÃ¤ndern.
Tipp: Einen neuen Plot kÃ¶nnte ihr Ã¼ber die Funktion matplotlib.pyplot.figure(i) erzeugen,
wobei i die laufende Nummer des Plots ist und bei 1 beginnt.
"""


"""
4. Berechnet nun die Orientierung (in Grad) des Gradienten in jedem Pixel mit Hilfe der Sobel-
Operatoren auf dem Originalbild sowie auf eurem besten weichgezeichneten Ergebnis (Teilaufgabe
2). Erstellt anschlieÃŸend jeweils ein Histogramm Ã¼ber die Gradientenorientierungen und
visualisiert diese. Nutzt fÃ¼r das Histogramm 9 BehÃ¤lter und setzt die Grenzen (range-Parameter)
entsprechend. Welche Unterschiede gibt es zwischen den beiden Histogrammen? Wie Ã¤ndert sich
das Histogramm, wenn ihr den Parameter weights (den Parameter gibt es sowohl bei numpy.
histogram() als auch bei matplotlib.pyplot.hist()) auf die entsprechenden Bilder mit den
GradientenstÃ¤rken setzt?
"""